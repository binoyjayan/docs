
================================================================================
Create keypair and extract public key from an RSA keypair
================================================================================

Create the following folders/files are needed in the following locations in 'pwd'
as mentioned in '/etc/ssl/openssl.cnf'
This is only needed if you want to act as a 'CA'
demoCA/
demoCA/index.txt
demoCA/newcerts/
demoCA/serial
demoCA/private

--------------------------------------------------------------------------------
Initial serial number used while signing as a 'CA'
--------------------------------------------------------------------------------
echo "01" > demoCA/serial

--------------------------------------------------------------------------------
Create private key for CA/Self:
--------------------------------------------------------------------------------
openssl genrsa -out mykey.pem 2048
openssl genrsa 2048 > mykey.pem

openssl genrsa -out demoCA/private/cakey.pem 2048							<<== If done at CA

Create self signed certificate (only) using 'demoCA/private/cakey.pem':
--------------------------------------------------------------------------------
openssl req -new -x509 -days 3650 -key mykey.pem -out mycert.pem -nodes
openssl req -new -x509 -days 3650 -key 'demoCA/private/cakey.pem' -out demoCA/cacert.pem -nodes		<<== If done at CA

Create certificate and private key (one shot):
--------------------------------------------------------------------------------
openssl req -x509 -days 3650 -newkey rsa:2048 -keyout mykey.pem -out mycert.pem -nodes

Create client key and 'csr', sign it to make 'crt'
--------------------------------------------------------------------------------
openssl genrsa -out cl.key 2048
openssl req -new -key cl.key -out BinoyJayan.csr
openssl ca -in BinoyJayan.csr BinoyJayan.crt								<<-- Done by CA

View certificate(s)/key(s):
--------------------------------------------------------------------------------
openssl rsa -text -noout -in mykey.pem 
openssl x509 -in cacert.pem -dates -issuer -noout -subject
openssl req -in BinoyJayan.csr -noout -text
openssl x509 -in BinoyJayan.crt -dates -issuer -noout -subject

Retrieve/Extract public key from certificate
--------------------------------------------------------------------------------
openssl x509 -pubkey -noout -in mycert.pem  > pubkey.pem

Convert pem to DER format
--------------------------------------------------------------------------------
openssl x509 -outform der -in mycert.pem -out mycert.der


CA  : Certificate Authority
CSR : Certificate Sign Request
CRT : Certificate


--------------------------------------------------------------------------------
Sign an image e.g. boot.ing in android
--------------------------------------------------------------------------------
mv -f boot.img boot.img.nonsecure
openssl dgst -sha256 -binary boot.img.nonsecure > boot.img.sha256		# Same as 'sha256sum'
openssl rsautl -sign -in boot.img.sha256 -inkey mykey.pem -out boot.img.sig	# Sign with a private key to create digital signature
										# without involving CA
dd if=/dev/zero of=boot.img.sig.padded bs=2048 count=1				# Pad with the page size used in the bootloader 'fastboot'
dd if=boot.img.sig of=boot.img.sig.padded conv=notrunc
cat boot.img.nonsecure boot.img.sig.padded > boot.img.secure
rm -rf boot.img.sha256 boot.img.sig boot.img.sig.padded
mv -f boot.img.secure boot.img							# This is the signed image

--------------------------------------------------------------------------------
Validation of image
--------------------------------------------------------------------------------

signature_ptr : points to the buffer containing the digital signature attached to boot.img
plain_text    : points to the buffer containing the boot image's message digest


char digest[SHA256_SIZE];

ret = decrypt(signature_ptr, plain_text);
if (ret != hash_size) {
	printf("ERROR: Image Invalid! signature check failed! ret %d\n", ret);
}

calculate_hash("boot.img", digest, SHA256_SIZE);

// Compare the expected hash with the calculated hash.
if (memcmp(plain_text, digest, SHA256_SIZE) != 0) {
	printf("ERROR: Image Invalid! Please use another image!\n");
}

int decrypt(unsigned char *signature_ptr, unsigned char *plain_text)
{
        // Extract Public Key and Decrypt Signature
        int ret = -1;
        X509 *x509_certificate = NULL;
        unsigned char *cert_ptr = certBuffer;
        unsigned int cert_size = sizeof(certBuffer);
        EVP_PKEY *pub_key = NULL;
        RSA *rsa_key = NULL;

        // Get Pubkey and Convert the internal EVP_PKEY to RSA internal struct

        if ((x509_certificate = d2i_X509(NULL, &cert_ptr, cert_size)) == NULL) {
                printf("ERROR: Image Invalid, X509_Certificate is NULL!\n");
                goto cleanup;
        }

        pub_key = X509_get_pubkey(x509_certificate);
        if (pub_key == NULL) {
                printf("ERROR: Boot Invalid, PUB_KEY is NULL!\n");
                goto cleanup;
        }

        rsa_key = EVP_PKEY_get1_RSA(pub_key);
        if (rsa_key == NULL) {
                printf("ERROR: Boot Invalid, RSA_KEY is NULL!\n");
                goto cleanup;
        }

        ret = RSA_public_decrypt(SIGNATURE_SIZE, signature_ptr, plain_text, rsa_key, RSA_PKCS1_PADDING);
        printf("DEBUG openssl: Return of RSA_public_decrypt = %d\n", ret);

 cleanup:
        if (rsa_key != NULL)
                RSA_free(rsa_key);
        if (x509_certificate != NULL)
                X509_free(x509_certificate);
        if (pub_key != NULL)
                EVP_PKEY_free(pub_key);
        return ret;
}

--------------------------------------------------------------------------------
bin2hex.py: Convert binary file (Certificate in .DER format to hex)
--------------------------------------------------------------------------------
#!/usr/bin/python

import sys

if len(sys.argv) < 3:
   print "Usage: " 
   print sys.argv[0] + " <binary file> <hex output file>"
   sys.exit(1)


f1 = open(sys.argv[1], 'rb')
f2 = open(sys.argv[2], 'wb')

f2.write("const char key[] = {\n")

count = 0
tcount = 0

byte = "x"
while byte != "":
    byte = f1.read(1)
    if byte == "":
	break
    count += 1
    tcount += 1
    f2.write("0x%.2x, " % ord(byte))
    if count > 11:
        count = 0
        f2.write("\n")

f2.write("\n};\n")

print "Keysize = " , tcount , "bytes"
f2.write("// Keysize = %d bytes\n" % tcount);

f1.close()
f2.close()
--------------------------------------------------------------------------------



References
--------------------------------------------------------------------------------
https://www.youtube.com/watch?v=Gw-Iq9StoXg




