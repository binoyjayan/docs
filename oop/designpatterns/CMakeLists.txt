CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(DesignPatterns)
SET(CMAKE_BUILD_TYPE RelWithDebInfo)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")

SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_RUNTIME OFF)
FIND_PACKAGE(Boost 1.45.0 COMPONENTS filesystem regex)

FIND_PACKAGE(GTest REQUIRED)
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIR})

if(NOT Boost_FOUND)
    message(SEND_ERROR "Failed to find Boost library")
endif()

ADD_SUBDIRECTORY(solid-design-principles)
ADD_SUBDIRECTORY(builder)
ADD_SUBDIRECTORY(factory)
ADD_SUBDIRECTORY(prototype)
ADD_SUBDIRECTORY(singleton)
ADD_SUBDIRECTORY(adapter)
ADD_SUBDIRECTORY(bridge)
ADD_SUBDIRECTORY(composite)
ADD_SUBDIRECTORY(decorator)
ADD_SUBDIRECTORY(facade)
ADD_SUBDIRECTORY(flyweight)

ADD_SUBDIRECTORY(proxy)
ADD_SUBDIRECTORY(chain-of-responsibility)
ADD_SUBDIRECTORY(command)
ADD_SUBDIRECTORY(interpreter)
ADD_SUBDIRECTORY(iterator)
ADD_SUBDIRECTORY(mediator)
ADD_SUBDIRECTORY(memento)
ADD_SUBDIRECTORY(observer)
ADD_SUBDIRECTORY(state)
ADD_SUBDIRECTORY(strategy)
ADD_SUBDIRECTORY(template-method)
ADD_SUBDIRECTORY(visitor)
#TARGET_LINK_LIBRARIES(myexe Boost::filesystem Boost::regex)
