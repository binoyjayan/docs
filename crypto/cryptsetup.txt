
============================================================================================
cryptsetup
============================================================================================

--------------------------------------------------------------------------------------------
Create an encrypted Luks device, mount, close - One time only
--------------------------------------------------------------------------------------------

dd if=/dev/zero of=cryptfile bs=1M count=500
sudo losetup /dev/loop0 cryptfile
sudo losetup -a
badblocks -s -w -t random -v /dev/loop0
sudo modprobe aes
sudo cryptsetup -y luksFormat -c aes -s 256 /dev/loop0
sudo cryptsetup luksOpen /dev/loop0 crypt_fun		<<-- Create dm device 'crypt_fun'
sudo mkfs.ext4 -j /dev/mapper/crypt_fun
sudo e2fsck -f /dev/mapper/crypt_fun
sudo cryptsetup luksClose crypt_fun
sudo losetup -d /dev/loop0

--------------------------------------------------------------------------------------------
Open Luks and mount and then umount and close - Each time 
--------------------------------------------------------------------------------------------
sudo losetup /dev/loop0 cryptfile
sudo cryptsetup luksOpen /dev/loop0 crypt_fun
sudo mount -t ext4 /dev/mapper/crypt_fun mnt

<-- Use the encrypted file system -->

sudo umount mnt
sudo cryptsetup luksClose crypt_fun
sudo losetup -d /dev/loop0

--------------------------------------------------------------------------------------------
Close the device and mapping
--------------------------------------------------------------------------------------------
sudo cryptsetup luksClose crypt_fun
sudo losetup -d /dev/loop0

--------------------------------------------------------------------------------------------
Create encrypted volume on sdb
cipher[:keycount]-mode-iv:ivopts
--------------------------------------------------------------------------------------------

# dd if=/dev/zero of=/dev/sdb bs=1M count=50
# cryptsetup -y -c aes-ecb-essiv:sha256 -s 256 --hash sha256 luksFormat /dev/sdb
# cryptsetup -y -c aes-xts-plain64:sha256 -s 256 --hash sha256 luksFormat /dev/sdb
# cryptsetup -y luksFormat -c aes -s 256 /dev/sdb
# dd of=/dev/mapper/crypt_fun if=/dev/zero bs=512 count=1

# One time setup - Format with one of the following:
cryptsetup -y -c aes-cbc-plain -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes-cbc-plain64 -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes-cbc-essiv:sha256 -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes-cbc-benbi -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes-cbc-null -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes-cbc-lmk -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes-cbc-tcw -s 256 --hash sha256 luksFormat /dev/sdb

# With a keycount
cryptsetup -y -c aes:2-cbc-plain -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes:2-cbc-plain64 -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes:2-cbc-essiv:sha256 -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes:2-cbc-null -s 256 --hash sha256 luksFormat /dev/sdb
cryptsetup -y -c aes:2-cbc-lmk -s 256 --hash sha256 luksFormat /dev/sdb


cryptsetup luksDump --dump-master-key /dev/sdb



cryptsetup luksOpen /dev/sdb crypt_fun
dmsetup table --showkeys
cryptsetup luksSuspend crypt_fun
dmsetup table --showkeys

dmsetup message crypt_fun 0 key wipe
dmsetup table --showkeys
dmsetup message crypt_fun 0 key set d862e9679971108b817e1dd236386f443632759ead2e9ae393a448cd238af5e4
dmsetup message crypt_fun 0 key set 1234567890123456789012345678901234567890123456789012345678901234

cryptsetup luksResume crypt_fun

ls -l data.txt
cat data.txt > /dev/mapper/crypt_fun

dd if=/dev/mapper/crypt_fun of=out.txt bs=1 count=8064

# Test file system
mkfs.ext4 -j /dev/mapper/crypt_fun
e2fsck -f /dev/mapper/crypt_fun

mount -t ext4 /dev/mapper/crypt_fun /mnt


<-- perform file operations in the encrypted file system -->
cp *.txt /mnt

umount /mnt
cryptsetup luksClose crypt_fun
cryptsetup luksRemoveKey /dev/sdb


--------------------------------------------------------------------------------------------
Example
--------------------------------------------------------------------------------------------


# cryptsetup -y -c aes-ecb-essiv:sha256 -s 256 --hash sha256 luksFormat /dev/sdb
# cryptsetup luksOpen /dev/sdb crypt_fun
Enter passphrase for /dev/sdb: 
[  169.195444] BJ:crypt_ctr:1769: argv[0]=aes-cbc-essiv:sha256
[  169.195938] BJ:crypt_ctr:1769: argv[1]=721c374b4e55e7895540c4d8c4c051abfb8fd5df423c6693d8567b28343f4d72
[  169.196818] BJ:crypt_ctr:1769: argv[2]=0
[  169.197121] BJ:crypt_ctr:1769: argv[3]=/dev/sdb
[  169.197394] BJ:crypt_ctr:1769: argv[4]=4096
[  169.197636] BJ:crypt_ctr_cipher:1591: tmp at beginning:aes-cbc-essiv:sha256
[  169.198070] BJ:crypt_ctr_cipher:1593: tmp after cipher:cbc-essiv:sha256
[  169.198412] BJ:crypt_ctr_cipher:1611: tmp after chainmode:essiv:sha256
[  169.198730] BJ:crypt_ctr_cipher:1613: tmp after ivopts:(null)
[  169.199065] BJ:crypt_alloc_tfms:1463: tfms[0]=crypto_alloc_skcipher(cbc(aes))
[  169.199418] BJ:crypt_ctr_cipher:1646: cipher_api=cbc(aes), ret=0
[  169.199714] BJ:crypt_ctr_cipher:1656: IV size before=16
[  169.199979] BJ:crypt_ctr_cipher:1727: cipher    =aes
[  169.200268] BJ:crypt_ctr_cipher:1728: chainmode =cbc
[  169.200516] BJ:crypt_ctr_cipher:1729: ivmode    =essiv
[  169.200769] BJ:crypt_ctr_cipher:1730: IV_size   =16
[  169.201049] BJ:crypt_ctr_cipher:1731: ivopts    =sha256
# 
# dmsetup table --showkeys 
crypt_fun: 0 1019904 crypt aes-cbc-essiv:sha256 721c374b4e55e7895540c4d8c4c051abfb8fd5df423c6693d8567b28343f4d72 0 8:16 4096
# 
# 
crypt_fun: <start> <length> crypt cipher key IV-offset device offset

cryptsetup luksDump --dump-master-key /dev/sdb

--------------------------------------------------------------------------------------------
dm-setup table format
--------------------------------------------------------------------------------------------
<start> <length> crypt cipher        key                               IV-offset  device      offset
0       2097152  crypt aes-cbc-plain 0123456789abcdef0123456789abcdef  0          /dev/loop0  0

--------------------------------------------------------------------------------------------
Advanced commands
--------------------------------------------------------------------------------------------
sudo cryptsetup luksAddKey /dev/loop0			<<-- Add a key to next available slot
sudo cryptsetup luksAddKey /dev/loop0 -S 5		<<-- Add a key to next slot 5
sudo cryptsetup luksDump /dev/loop0 | grep Slot		<<-- View slots

sudo cryptsetup luksRemoveKey /dev/loop0		<<-- Remove the first key with the mentioned passphrase
sudo cryptsetup luksKillSlot  /dev/loop0 5		<<-- Remove key from slot 5 with key from any other slot
sudo cryptsetup luksAddKey    /dev/loop0 keyfile -S 6	<<-- Add key from keyfile at slot 6

sudo cryptsetup luksDump --dump-master-key /dev/loop0	<<-- Dumps the master key in hex format

--------------------------------------------------------------------------------------------
Forgot key after mounting fs
--------------------------------------------------------------------------------------------

1. Find hex key
  sudo dmsetup table --showkeys 

<output:>
  crypt_fun: 0 1019904 crypt aes-cbc-plain 92c5f589373259d48dbb6e7b3b1b4cf5e0ec2d549f8c51fb118be48f60663207 0 7:0 4096

NB: This is the same as what you get when you run luksDump with '--dump-master-key' option

MK dump:	92 c5 f5 89 37 32 59 d4 8d bb 6e 7b 3b 1b 4c f5 
		e0 ec 2d 54 9f 8c 51 fb 11 8b e4 8f 60 66 32 07 

2. Store the hex key (After 'aes-cbc-plain') in a file. This is in postscript format.
   echo 92c5f589373259d48dbb6e7b3b1b4cf5e0ec2d549f8c51fb118be48f60663207 > existinglukskey.txt

3. Convert the hex file to binary
   xxd -r -p existinglukskey.txt existinglukskey.bin

   -r  : Convert from hex to binary
   -p  : Use plain hex or postscript format

4. Create a new key using this master key file
   cryptsetup luksAddKey /dev/loop0 --master-key-file existinglukskey.bin

--------------------------------------------------------------------------------------------
Reference
--------------------------------------------------------------------------------------------
http://www.thegeekstuff.com/2016/03/cryptsetup-lukskey/
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Logical_Volume_Manager_Administration/device_mapper.html#dm-mappings
https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption


http://nelenkov.blogspot.co.uk/2015/05/hardware-accelerated-disk-encryption-in.html
https://nelenkov.blogspot.in/2014/10/revisiting-android-disk-encryption.html
http://source.android.com/devices/tech/encryption/index.html
http://www.chronox.de/crypto-API
http://www.logix.cz/michal/devel/cryptodev/cryptodev-20091126
http://www.saout.de/misc/dm-crypt
https://gitlab.com/cryptsetup/cryptsetup/wikis/DMCrypt
https://gitlab.com/cryptsetup/cryptsetup
Documentation/device-mapper/dm-crypt.txt

http://nelenkov.blogspot.jp/2012/08/changing-androids-disk-encryption.html
https://gitlab.com/cryptsetup/cryptsetup/wikis/DMCrypt
https://www.qualcomm.com/products/snapdragon/security
https://www.qualcomm.com/news/snapdragon/2014/11/07/cryptographic-module-snapdragon-805-fips-140-2-certified
http://nelenkov.blogspot.com/2014/10/revisiting-android-disk-encryption.html
https://www.tarsnap.com/scrypt.html




